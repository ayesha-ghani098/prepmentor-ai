package com.prepmentor.backend.model;

import com.prepmentor.backend.enums.AnswerType;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.Instant;

/**
 * Entity representing an answer submitted by a user for a question.
 * <p>
 * Fields:
 * <ul>
 * <li>id - Unique identifier for the answer.</li>
 * <li>text - The answer text (if applicable).</li>
 * <li>fileUrl - URL to the uploaded answer file (audio/video, if
 * applicable).</li>
 * <li>submittedAt - Timestamp when the answer was submitted.</li>
 * <li>question - The question this answer is for.</li>
 * <li>user - The user who submitted the answer.</li>
 * <li>answerType - The type of answer (TEXT, AUDIO, VIDEO).</li>
 * <li>score - The overall score for the answer (e.g., out of 5).</li>
 * <li>correctness - The correctness score for the answer (e.g., out of 5).</li>
 * <li>completeness - The completeness score for the answer (e.g., out of
 * 5).</li>
 * <li>clarity - The clarity score for the answer (e.g., out of 5).</li>
 * <li>feedback - The feedback text generated by OpenAI.</li>
 * </ul>
 */
@Entity
@Data
@AllArgsConstructor
@NoArgsConstructor
@Builder
@Table(name = "answer")
public class Answer {
    /**
     * The unique identifier for the answer.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The answer text (if applicable).
     */
    private String text;

    /**
     * URL to the uploaded answer file (audio/video, if applicable).
     */
    private String fileUrl;

    /**
     * Timestamp when the answer was submitted.
     */
    private Instant submittedAt;

    /**
     * The question this answer is for.
     */
    @ManyToOne
    private Question question;

    /**
     * The user who submitted the answer.
     */
    @ManyToOne
    private User user;

    /**
     * The type of answer (TEXT, AUDIO, VIDEO).
     */
    @Enumerated(EnumType.STRING)
    private AnswerType answerType;

    /**
     * The overall score for the answer (e.g., out of 5).
     */
    private Integer score;

    /**
     * The correctness score for the answer (e.g., out of 5).
     */
    private Integer correctness;

    /**
     * The completeness score for the answer (e.g., out of 5).
     */
    private Integer completeness;

    /**
     * The clarity score for the answer (e.g., out of 5).
     */
    private Integer clarity;

    /**
     * The feedback text generated by OpenAI.
     */
    private String feedback;
}
